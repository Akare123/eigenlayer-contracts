├─ DelegationManager
├─ initialize
│  ├─ when called on deployment
│  │  └─ it should initialize correctly
│  └─ when called after deployment
│     └─ it should revert
├─ setOperatorDetails
│  ├─ when caller is an operator
│  │  ├─ when operator tries to update their earningsReceiver to address 0
│  │  │  └─ it should revert
│  │  ├─ when operator tries to decrease their stakerOptOutWindowBlocks
│  │  │  └─ it should revert
│  │  └─ when operator tries to increase their stakerOptOutWindowBlocks more than maxStakerOptOutWindowBlocks
│  │     └─ it should revert
│  └─ when caller is not an operator
│     └─ it should revert
├─ updateOperatorMetadata
│  ├─ when caller is an operator
│  │  └─ it should emit the operators metadataURI
│  └─ when caller is not an operator
│     └─ it should revert
├─ registerAsOperator
├─ delegateTo
│  ├─ when caller is already delegated
│  │  └─ it should revert
│  └─ when caller isnt already delegated
│     ├─ when operator does NOT require approver sig
│     │  ├─ when operator is NOT a registered operator
│     │  │  └─ it should revert
│     │  └─ when operator is a registered operator
│     │     └─ it should delegate staker to operator
│     ├─ when operator requires approver sig
│     │  └─ when the approver sig is valid
│     │     ├─ it should delegate the staker to operator
│     │     └─ when the approver sig is invalid
│     │        ├─ when the signature is expired
│     │        │  └─ it should revert
│     │        ├─ when the approver signature is from non-erc1271 compliant wallet
│     │        │  └─ it should revert
│     │        ├─ when the signer of the approver sig is NOT approver
│     │        │  └─ it should revert
│     │        ├─ when the nonce is invalid
│     │        │  └─ it should revert
│     │        └─ when the no signature provided
│     │           └─ it should revert
│     ├─ when operator is frozen
│     │  └─ it should revert
│     ├─ when staker tries delegating to operator that isn't registered
│     │  └─ it should revert
│     ├─ when delegation is paused
│     │  └─ it should revert
│     └─ when staker is an operator themselves
│        └─ it should revert
├─ delegateToBySignature
│  ├─ when staker delegation signature is valid
│  │  └─ it should delegate staker to operator
│  └─ when staker delegation signature is invalid
│     ├─ when nonce is invalid
│     │  └─ it should revert
│     ├─ when signature is expired
│     │  └─ it should revert
│     └─ when no signature provided
│        └─ it should revert
├─ undelegate
│  ├─ when caller is delegated to an operator
│  │  └─ it should undelegate the staker
│  ├─ when the caller is an operator
│  │  └─ it should revert
│  └─ when caller isnt delegated to an operator
│     └─ it should revert
├─ queueWithdrawal
│  ├─ when PAUSED_ENTER_WITHDRAWAL_QUEUE
│  │  └─ it should revert 
│  ├─ when input params are invalid
│  │  ├─ when strategies length != shares length
│  │  │  └─ it should revert 
│  │  ├─ when withdrawer address is zero address
│  │  │  └─ it should revert
│  │  └─ when staker address is zero address
│  │     └─ it should revert
│  ├─ when multiple withdrawals queued with exact same params 
│  │  ├─ should have different withdrawal roots set to true for pendingWithdrawals
│  │  └─ nonce increments properly
│  ├─ when staker has deposited a single strategy
│  │  ├─ when staker has deposited through StrategyManager
│  │  │  └─ should return withdrawalRoot successfully with proper shares updates
│  │  └─ when staker has deposited beaconChainETHStrategy
│  │     └─ should return withdrawalRoot successfully with proper shares updates
│  ├─ when staker has deposited a single strategy w/ delegation
│  │  ├─ when staker has deposited through StrategyManager
│  │  │  └─ should return withdrawalRoot successfully with proper shares updates
│  │  └─ when staker has deposited beaconChainETHStrategy
│  │     └─ should return withdrawalRoot successfully with proper shares updates
│  │
│  ├─ when staker has deposited multiple strategies
│  │  ├─ when staker has deposited only through StrategyManager
│  │  │  └─ should return withdrawalRoot successfully with proper shares updates
│  │  └─ when staker has deposited beaconChainETHStrategy and through StrategyManager
│  │     └─ should return withdrawalRoot successfully with proper shares updates
│  └─ when staker has deposited multiple strategies w/ delegation
│     ├─ when staker has deposited only through StrategyManager
│     │  └─ should return withdrawalRoot successfully with proper shares updates
│     └─ when staker has deposited beaconChainETHStrategy and through StrategyManager
│        └─ should return withdrawalRoot successfully with proper shares updates
├─ completeQueuedWithdrawal
│  ├─ when PAUSED_EXIT_WITHDRAWAL_QUEUE
│  │  └─ it should revert 
│  ├─ when input params are invalid
│  │  ├─ when withdrawal root is not queued
│  │  │  └─ it should revert 
│  │  ├─ when delay period has not passed
│  │  │  └─ it should revert
│  │  ├─ when caller is not withdrawer address
│  │  │  └─ it should revert
│  │  └─ when receiveAsTokens is true
|  │     ├─ tokens length != strategies length
│  │     |  └─ it should revert
│  │     └─ tokens array doesn't match with withdrawal.strategies
│  │        └─ it should revert
│  ├─ when receiveAsTokens is True
|  │  ├─ when staker has queueWithdraw a single strategy
|  │  │  └─ should call withdrawSharesAsTokens for single strategy
|  │  └─ when staker has queueWithdraw multiple strategies
|  │     └─ should call withdrawSharesAsTokens for all strategies
│  └─ when receiveAsTokens is False (award shares back)
|     ├─ when staker has queueWithdraw a single strategy
|     │  ├─ when staker has queueWithdraw through StrategyManager
|     │  │  └─ should increase staker shares
|     │  └─ when staker has queueWithdraw beaconChainETHStrategy
|     │     └─ should increase staker shares
|     ├─ when staker has queueWithdraw a single strategy w/ delegation
|     │  ├─ when staker has queueWithdraw through StrategyManager
|     │  │  └─ should increase staker and operator shares
|     │  └─ when staker has queueWithdraw beaconChainETHStrategy
|     │     └─ should increase staker and operator shares
|     │
|     ├─ when staker has queueWithdraw multiple strategies
|     │  ├─ when staker has queueWithdraw only through StrategyManager
|     │  │  └─ should increase staker shares for all strategies
|     │  └─ when staker has queueWithdraw beaconChainETHStrategy and through StrategyManager
|     │     └─ should increase staker shares for all strategies including in EigenPodManager
|     └─ when staker has queueWithdraw multiple strategies w/ delegation
|        ├─ when staker has queueWithdraw only through StrategyManager
|        │  └─ should increase staker/operator shares for all strategies
|        └─ when staker has queueWithdraw beaconChainETHStrategy and through StrategyManager
|           └─ should increase staker/operator shares for all strategies including in EigenPodManager
├─ increaseDelegatedShares
└─ decreaseDelegatedShares